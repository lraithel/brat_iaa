__author__ = "Lisa Raithel"

import agreement as a

explanations = """

CORRECT - when annotation tags and indices match completely\n
INCORRECT - when annotation tags do not match, but the indices coincide\n
PARTIAL - when the annotation tags are the same but one of the annotations has the same end index and a different start index\n
MISSING - annotations exising only in the gold standard annotation set\n
SPURIOUS - annotations existing only in the candidate annotation set\n



POS: Number possible (COR + INC + MIS), i.e., the number of fills in the answer key plus any optional fills allowed by the key and generated by the system
ACT: Number actual (COR + INC + SPU),i.e., the number of fills generated by the system under evaluation
COR: Number correct
PAR: Number partially correct (no partial credit was given in MUC-7)
INC: Number incorrect
MIS: Number missing
SPU: Number spurious
NON: Number non-committal (null fills generated by system that were also null in the answer key)


PRE: precision
REC: recall
FSC: F1 score
------------------------------------------------
UND: Undergeneration = MIS/POS
OVG: Overgeneration = SPU/ACT
SUB: Substitution = INC/(COR + INC)
------------------------------------------------
BOR: correct boundaries
IBO: incorrect boundaries

"""


def main():
    TYPE_FILTER = ["DRUG"]

    # doc = a.Document(
    #     "/home/lisa/Documents/dfki/KEEPHA/curation/test/alon/2001_3000/59_lifeline_v2_6777_1_1648459838.ann",
    #     type_filter=TYPE_FILTER,
    # )

    # doc2 = a.Document(
    #     "/home/lisa/Documents/dfki/KEEPHA/curation/test/selin/2001_3000/59_lifeline_v2_6777_1_1648459838.ann",
    #     type_filter=TYPE_FILTER,
    # )

    doc = a.DocumentCollection(
        "/home/lisa/Documents/dfki/KEEPHA/curation/test/alon_reduced/2001_3000/",
        # type_filter=TYPE_FILTER,
    )

    doc2 = a.DocumentCollection(
        "/home/lisa/Documents/dfki/KEEPHA/curation/test/selin_reduced/2001_3000/",
        # type_filter=TYPE_FILTER,
    )

    doc.make_gold()
    statistics = doc2.compare_to_gold(doc)

    """
    -------------------MUC-Table--------------------
    ------------------------------------------------
    pos:14
    act:11
    cor:8
    par:3
    inc:0
    mis:3
    spu:0
    ------------------------------------------------
    pre:0.7272727272727273
    rec:0.5714285714285714
    fsc:0.64
    ------------------------------------------------
    und:0.21428571428571427
    ovg:0.0
    sub:0.2727272727272727
    ------------------------------------------------
    bor:8
    ibo:3
    ------------------------------------------------

    ------------------------------------------------


    """
    # filter_ = a.Filter(
    #     name="test_filter", filter_type="tag", scope=["Drug"], positive_polarity=True
    # )

    # print(explanations)

    print(statistics)

    # print(filter_)

    # # filter_.apply_filter(doc)
    # print(doc.tags)
    # print(doc.filter_document(doc_filters=[filter_]))


if __name__ == "__main__":
    """
    from bratutils import agreement as a

    doc = a.Document('res/samples/A/data-sample-1.ann')
    doc2 = a.Document('res/samples/B/data-sample-1.ann')

    doc.make_gold()
    statistics = doc2.compare_to_gold(doc)

    print(statistics)
    """
    main()
